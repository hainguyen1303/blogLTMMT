<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Nguyen Van Hai’s Blog</title>
    <link>http://localhost:1313/tags/java/</link>
    <description>Recent content in Java on Nguyen Van Hai’s Blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 16 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Biến, kiểu dữ liệu và toán tử trong Java</title>
      <link>http://localhost:1313/posts/bien-kieu-du-lieu-toan-tu-java/</link>
      <pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/bien-kieu-du-lieu-toan-tu-java/</guid>
      <description>&lt;p&gt;Khi mới chạm vào Java, nhiều bạn dễ bị choáng ngợp bởi số lượng khái niệm cần ghi nhớ. Tuy nhiên, nếu hiểu rõ biến, kiểu dữ liệu và toán tử, bạn sẽ nắm được “ngữ pháp” cốt lõi để diễn đạt mọi ý tưởng. Bài viết này giúp bạn có cái nhìn hệ thống, đi kèm ví dụ thực tế để thực hành ngay.&lt;/p&gt;&#xA;&lt;h2 id=&#34;biến-trong-java-là-gì&#34;&gt;Biến trong Java là gì?&lt;/h2&gt;&#xA;&lt;p&gt;Biến (variable) giống như chiếc hộp để lưu trữ thông tin tạm thời trong bộ nhớ. Mỗi biến có tên, kiểu dữ liệu và giá trị. Java là ngôn ngữ kiểu tĩnh, nghĩa là bạn phải khai báo kiểu dữ liệu ngay khi tạo biến, giúp chương trình an toàn và dễ kiểm soát hơn.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Giới thiệu về ngôn ngữ Java – Tại sao nó vẫn quan trọng đến ngày nay</title>
      <link>http://localhost:1313/posts/gioi-thieu-ngon-ngu-java/</link>
      <pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/gioi-thieu-ngon-ngu-java/</guid>
      <description>&lt;p&gt;Java đã xuất hiện từ năm 1995 nhưng vẫn giữ vị thế vững chắc trong thế giới phát triển phần mềm hiện đại. Là một lập trình viên Việt Nam, tôi thường ví Java giống như một “người bạn lâu năm” luôn đáng tin cậy khi cần xây dựng ứng dụng bền vững, an toàn và có khả năng mở rộng cao. Trong bài viết này, chúng ta sẽ điểm lại hành trình của Java, phân tích vì sao ngôn ngữ này vẫn được các doanh nghiệp ưa chuộng, và gợi ý cách bạn có thể bắt đầu học một cách hiệu quả.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Collections – List, Set, Map là gì và dùng khi nào</title>
      <link>http://localhost:1313/posts/java-collections-co-ban/</link>
      <pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java-collections-co-ban/</guid>
      <description>&lt;p&gt;Khi dữ liệu vượt quá mức vài biến đơn lẻ, Java Collections Framework sẽ trở thành trợ thủ đắc lực cho bạn. Bộ sưu tập này cung cấp các cấu trúc dữ liệu đã được tối ưu sẵn, giúp việc lưu trữ, truy xuất và xử lý trở nên hiệu quả. Ba nhân vật quan trọng nhất mà lập trình viên nào cũng phải nắm là &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt; và &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lập trình hướng đối tượng trong Java – Hiểu rõ Class và Object</title>
      <link>http://localhost:1313/posts/lap-trinh-huong-doi-tuong-java/</link>
      <pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/lap-trinh-huong-doi-tuong-java/</guid>
      <description>&lt;p&gt;Lập trình hướng đối tượng (OOP) là trái tim của Java. Nhờ mô hình này, chúng ta có thể mô tả thế giới thực một cách trực quan thông qua các lớp (class) và đối tượng (object). Trong bài viết này, tôi sẽ cùng bạn đi qua những khái niệm nền tảng, minh họa bằng code và chia sẻ một số kinh nghiệm giúp bạn áp dụng OOP hiệu quả khi xây dựng ứng dụng thực tế.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xử lý ngoại lệ (Exception Handling) trong Java</title>
      <link>http://localhost:1313/posts/xu-ly-ngoai-le-java/</link>
      <pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/xu-ly-ngoai-le-java/</guid>
      <description>&lt;p&gt;Ngoại lệ (exception) là những tình huống bất ngờ xảy ra khi chương trình đang chạy, chẳng hạn đọc file không tồn tại hoặc chia cho 0. Nếu không xử lý, ứng dụng sẽ dừng đột ngột và trải nghiệm người dùng bị ảnh hưởng. Với Java, cơ chế exception giúp chúng ta kiểm soát lỗi thay vì để chúng phá hỏng toàn bộ hệ thống.&lt;/p&gt;&#xA;&lt;h2 id=&#34;phân-loại-ngoại-lệ&#34;&gt;Phân loại ngoại lệ&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Checked Exception&lt;/strong&gt;: Bắt buộc xử lý trong compile-time, ví dụ &lt;code&gt;IOException&lt;/code&gt;, &lt;code&gt;SQLException&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Unchecked Exception&lt;/strong&gt;: Xảy ra trong runtime, như &lt;code&gt;NullPointerException&lt;/code&gt;, &lt;code&gt;IllegalArgumentException&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt;: Đề cập đến lỗi nghiêm trọng (thiếu bộ nhớ), thường khó phục hồi.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Hiểu phân loại giúp bạn nhận biết khi nào cần &lt;code&gt;try-catch&lt;/code&gt;, khi nào nên để ngoại lệ lan truyền lên lớp gọi.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
